#!/usr/bin/env python
##
## EPITECH PROJECT, 2020
## 103cipher.py
## File description:
## 103cipher project encryption and decryption project
##

import sys
import math
from math import sqrt

def helpfile():
    print("USAGE")
    print("\t./103cipher message key flag\n")
    print("DESCRIPTION")
    print("\tmessage\t\ta message, made of ASCII characters")
    print("\tkey\t\tthe encryption key, made of ASCII characters")
    print("\tflag\t\t0 for the message to be encrypted, 1 to be decrypted")


def check_arg(value): 
    try:
        int(value)
    except ValueError:
        return 84
    else:
        return 0

def error_handling():
    if (len(sys.argv) != 4 or len(sys.argv) == 1):
        print ("Error: Invalid arguments, run -h if needed")
        return 84
    elif (check_arg(sys.argv[3]) == 84):
        print ("Error: Flag should either be 1 or 0, run -h if needed")
        return 84
    if (sys.argv[3] != 0 or sys.argv[3] != 1):
        print ("Error: Flag should either be 1 or 0, run -h if needed")
        return 84
    return 0


def create_matrix(value):
    square = math.floor(math.sqrt(value)) + 1
    return square * square 


def convert_key(key_mat):
    size_key = len(key_mat)
    great_square = create_matrix(size_key)

    for x in range(size_key) and size_key * size_key < great_square:
        matrix = []
        for y in range(key_mat):
            for a in key_mat:
                matrix.extend(ord(num) for num in a)
                print('%3d'%matrix[x][y], end='')
    print (matrix)


def main():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        helpfile()
    elif (error_handling() != 0):
        exit (84)
    else:
        print (create_matrix(13))
        print("Key Matrix:")
        #convert_key(sys.argv[2])
    return 0


main()